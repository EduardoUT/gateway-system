/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mx.grupogateway.system.view;

import com.formdev.flatlaf.FlatDarkLaf;
import com.mx.grupogateway.system.controller.UsuarioController;
import com.mx.grupogateway.system.modelo.Usuario;
import com.mx.grupogateway.system.view.util.CamposCommonMethods;
import java.awt.event.MouseEvent;
import java.util.Optional;
import javax.swing.JOptionPane;

/**
 * TODO: Hacer validación que valide que los campos password coincidan.
 *
 * @author Eduardo Reyes Hernández
 */
public class Registro extends javax.swing.JFrame {

    private UsuarioController usuarioController;

    /**
     * Creates new form Registro
     */
    public Registro() {
        initComponents();
        iniciarProcesos();
    }

    private void iniciarProcesos() {
        this.usuarioController = new UsuarioController();
        passwordStatusLabel.setVisible(false);
    }

    /**
     * Método que realiza el registro de un usuario que no posea una cuenta.
     *
     * Recibe un Optional con el valor del usuarioId en el objeto Empleado.
     *
     * Si devuelve Optional.empty: El empleado no existe.
     *
     * Si esta presente un valor entero y sea diferente de 0: El empleado ya
     * tiene un usuario asignado.
     *
     * Si esta presente un valor entero y sea igual a 0: Se procede a registrar
     * el usuario asociandolo a ese empleadoID.
     */
    private void registrarUsuario() {
        String idUsuario = campoIdUsuario.getText();
        if (sonCamposValidosRegistro()) {
            Optional id = this.usuarioController.consultarIdUsuario(idUsuario);
            if (!id.isPresent()) {
                JOptionPane.showMessageDialog(
                        null,
                        "El usuario " + campoNombreUsuario.getText() + " no existe en la BD.",
                        "Usuario inexistente.",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                boolean esPasswordNula = this.usuarioController.esPasswordNula(idUsuario);
                if (esPasswordNula) {
                    this.usuarioController.actualizarPassword(new Usuario(
                            campoIdUsuario.getText(),
                            campoNombreUsuario.getText(),
                            campoCheckPassword.getPassword()
                    ));
                    JOptionPane.showMessageDialog(null,
                            "Usuario registrado éxitosamente.",
                            "Registro éxitoso",
                            JOptionPane.INFORMATION_MESSAGE);
                    limpiarRegistros();
                } else {
                    JOptionPane.showMessageDialog(null,
                            "Este usuario ya a sido registrado.",
                            "Registro anulado.",
                            JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(
                    null,
                    "Campos obligatorios, por favor, complete el formulario.",
                    "Formulario incompleto", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private boolean sonCamposValidosRegistro() {
        return !campoIdUsuario.getText().isEmpty()
                && !campoNombreUsuario.getText().isEmpty()
                && campoPassword.getPassword().length != 0
                && campoCheckPassword.getPassword().length != 0;
    }

    private void limpiarRegistros() {
        campoIdUsuario.setText("");
        campoNombreUsuario.setText("");
        campoPassword.setText("");
        campoCheckPassword.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        botonRegresar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        campoIdUsuario = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        campoNombreUsuario = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        campoPassword = new javax.swing.JPasswordField();
        jLabel4 = new javax.swing.JLabel();
        campoCheckPassword = new javax.swing.JPasswordField();
        botonRegistrar = new javax.swing.JButton();
        passwordStatusLabel = new javax.swing.JLabel();
        checkBoxVerPassword = new javax.swing.JCheckBox();
        botonAyuda = new javax.swing.JButton();
        passwordConfirmLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        botonRegresar.setText("Regresar");
        botonRegresar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonRegresarMouseClicked(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 153, 204));

        jLabel6.setText("Id Usuario:");

        jLabel2.setText("Nombre de Usuario:");

        jLabel3.setText("Contraseña:");

        campoPassword.setToolTipText("Mínimo 10 carácteres, debe tener al menos 1 (minúscula, mayúscula, número, carácter especial ! $ % & * ? @)");
        campoPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                campoPasswordKeyReleased(evt);
            }
        });

        jLabel4.setText("Confirmar Contraseña:");

        campoCheckPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                campoCheckPasswordKeyReleased(evt);
            }
        });

        botonRegistrar.setText("Registrarse");
        botonRegistrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonRegistrarMouseClicked(evt);
            }
        });

        passwordStatusLabel.setText("Status");

        checkBoxVerPassword.setBorder(null);
        checkBoxVerPassword.setContentAreaFilled(false);
        checkBoxVerPassword.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        checkBoxVerPassword.setFocusPainted(false);
        checkBoxVerPassword.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/ojoCerrado.png"))); // NOI18N
        checkBoxVerPassword.setRolloverEnabled(false);
        checkBoxVerPassword.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/ojoAbierto.png"))); // NOI18N
        checkBoxVerPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxVerPasswordActionPerformed(evt);
            }
        });

        botonAyuda.setText("?");
        botonAyuda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonAyudaMouseClicked(evt);
            }
        });

        passwordConfirmLabel.setText("Status");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(botonRegistrar)
                .addGap(101, 101, 101))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(campoPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(checkBoxVerPassword))
                    .addComponent(campoIdUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
                        .addComponent(campoNombreUsuario, javax.swing.GroupLayout.Alignment.LEADING))
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(passwordConfirmLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(passwordStatusLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(campoCheckPassword, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(botonAyuda)))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoIdUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoNombreUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(checkBoxVerPassword, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(campoPassword))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passwordStatusLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(campoCheckPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonAyuda))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passwordConfirmLabel)
                .addGap(1, 1, 1)
                .addComponent(botonRegistrar)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(116, 116, 116)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(botonRegresar)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(botonRegresar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonRegresarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonRegresarMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON1) {
            this.dispose();
            new Login().setVisible(true);
        }
    }//GEN-LAST:event_botonRegresarMouseClicked

    private void botonRegistrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonRegistrarMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON1) {
            registrarUsuario();
        }
    }//GEN-LAST:event_botonRegistrarMouseClicked

    private void botonAyudaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonAyudaMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON1) {
            JOptionPane.showMessageDialog(null, "1. Mínimo 10 carácteres.\n"
                    + "2. Al menos una letra mayúscula.\n"
                    + "3. Al menos una letra minúsula.\n"
                    + "4. Al menos un número.\n"
                    + "5. Al menos uno de los siguientes "
                    + "carácteres ! $ % & * ? @", "Escribir contraseña segura.",
                    JOptionPane.INFORMATION_MESSAGE
            );
        }
    }//GEN-LAST:event_botonAyudaMouseClicked

    private void campoPasswordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoPasswordKeyReleased
        evt.getID();
        CamposCommonMethods.evaluarCampoPassword(
                campoPassword, passwordStatusLabel
        );
    }//GEN-LAST:event_campoPasswordKeyReleased

    private void checkBoxVerPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxVerPasswordActionPerformed
        evt.getID();
        CamposCommonMethods.visualizacionPassword(
                checkBoxVerPassword, campoPassword
        );
    }//GEN-LAST:event_checkBoxVerPasswordActionPerformed

    private void campoCheckPasswordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoCheckPasswordKeyReleased
        evt.getID();
        CamposCommonMethods.concidePassword(
                campoPassword,
                campoCheckPassword,
                passwordConfirmLabel
        );
    }//GEN-LAST:event_campoCheckPasswordKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        FlatDarkLaf.setup();

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Registro().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonAyuda;
    private javax.swing.JButton botonRegistrar;
    private javax.swing.JButton botonRegresar;
    private javax.swing.JPasswordField campoCheckPassword;
    private javax.swing.JTextField campoIdUsuario;
    private javax.swing.JTextField campoNombreUsuario;
    private javax.swing.JPasswordField campoPassword;
    private javax.swing.JCheckBox checkBoxVerPassword;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel passwordConfirmLabel;
    private javax.swing.JLabel passwordStatusLabel;
    // End of variables declaration//GEN-END:variables

}
